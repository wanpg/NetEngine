// Generated by delombok at Tue Nov 14 18:34:13 CST 2017
package net.engine.request;

import android.os.Process;
import android.support.annotation.NonNull;

import net.engine.JSONConvert;
import net.engine.NetCallBack;
import net.engine.NetEngine;
import net.engine.target.Target;

import java.util.List;

import io.reactivex.Observable;
import io.reactivex.ObservableEmitter;
import io.reactivex.ObservableOnSubscribe;
import io.reactivex.schedulers.Schedulers;

/**
 * 网络请求
 */
public class NetRequest<T> {
    @NonNull
    protected Target target;
    JSONConvert jsonConvert;

    public NetRequest(@NonNull Target target) {
        this.target = target;
    }

    /**
     * 设置自定义的gson
     *
     * @param jsonConvert
     * @return
     */
    public NetRequest<T> json(JSONConvert jsonConvert) {
        this.jsonConvert = jsonConvert;
        return this;
    }

    public NetRequestArray<T> asArray() {
        NetRequestArray<T> requestArray = new NetRequestArray<>(target);
        if (jsonConvert != null) {
            requestArray.json(jsonConvert);
        }
        return requestArray;
    }

    /**
     * 异步执行
     *
     * @param callBack
     * @return
     */
    public boolean execute(final NetCallBack<T> callBack) {
        final Runnable runnable = new Runnable() {
            @Override
            public void run() {
                String result;
                try {
                    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
                    result = target.internalExecute();
                    callBack.onFinished(formatResult(result));
                } catch (Exception e) {
                    e.printStackTrace();
                    callBack.onFailed(e);
                }
            }
        };
        NetEngine.getExecutor().execute(runnable);
        return false;
    }

    /**
     * 同步执行，直接返回结果
     *
     * @return
     */
    public T execute() throws Exception {
        String result = target.internalExecute();
        return formatResult(result);
    }

    public Observable<T> observable() {
        return Observable.create(new ObservableOnSubscribe<T>() {
            @Override
            public void subscribe(ObservableEmitter<T> emitter) {
                try {
                    T result = execute();
                    emitter.onNext(result);
                } catch (Throwable e) {
                    if (e instanceof Exception) {
                        emitter.onError(e);
                    } else {
                        emitter.onError(new Exception(e));
                    }
                } finally {
                    emitter.onComplete();
                }
            }
        }).subscribeOn(Schedulers.from(NetEngine.getExecutor()));
    }

    protected T formatResult(String result) {
        JSONConvert jsonConvertTmp;
        if (jsonConvert != null) {
            jsonConvertTmp = jsonConvert;
        } else {
            jsonConvertTmp = NetEngine.getDefaultJsonConvert();
        }
        //noinspection unchecked
        return (T) jsonConvertTmp.parse(result, target.getResultClass());
    }
}
