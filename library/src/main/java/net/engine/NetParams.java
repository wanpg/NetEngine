// Generated by delombok at Tue Nov 14 18:34:13 CST 2017
package net.engine;

import android.support.annotation.NonNull;
import android.text.TextUtils;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public final class NetParams<T> {

    public static class FormBody {
        public String key;
        public Object value;

        public FormBody(String key, Object value) {
            this.key = key;
            this.value = value;
        }

        public FormBody(Object value) {
            this.value = value;
        }
    }

    public static UrlBuilder builder() {
        return new UrlBuilder(new NetParams<>());
    }

    private static class Builder {
        protected NetParams params;

        public Builder(NetParams params) {
            this.params = params;
        }
    }

    public static class UrlBuilder extends VersionBuilder {

        public UrlBuilder(NetParams params) {
            super(params);
        }

        public VersionBuilder baseUrl(String baseUrl) {
            params.baseUrl(baseUrl);
            return this;
        }
    }

    public static class VersionBuilder extends ApiBuilder {

        public VersionBuilder(NetParams params) {
            super(params);
        }

        public ApiBuilder version(int version) {
            params.version(version);
            return this;
        }

        public ApiBuilder noVersion() {
            params.version(null);
            return this;
        }
    }

    public static class ApiBuilder extends Builder {
        public ApiBuilder(NetParams params) {
            super(params);
        }

        public ResBuilder api(String api) {
            params.api(api);
            return new ResBuilder(params);
        }
    }

    public static class ResBuilder extends MethodBuilder {
        public ResBuilder(NetParams params) {
            super(params);
        }

        public ResBuilder apiRes(@NonNull Object value) {
            params.apiRes(value);
            return this;
        }
    }

    public static class MethodBuilder extends Get.ParamsBuilder {

        public MethodBuilder(NetParams params) {
            super(params);
        }

        public Post.ParamsBuilder post() {
            params.method(Method.POST);
            return new Post.ParamsBuilder(params);
        }

        public Get.ParamsBuilder get() {
            params.method(Method.GET);
            return this;
        }
    }

    public static class Get {

        public static class ParamsBuilder extends TypeBuilder {
            public ParamsBuilder(NetParams params) {
                super(params);
            }

            @Deprecated
            public ParamsBuilder param(String key, Object value) {
                return query(key, value);
            }

            public ParamsBuilder query(String key, Object value) {
                params.query(key, value);
                return this;
            }
        }

        public static class TypeBuilder extends Builder {

            public TypeBuilder(NetParams params) {
                super(params);
            }

            public <T> ResultBuilder<T> result(Class<T> tClass) {
                return new ResultBuilder<>(params, tClass);
            }
        }

        public static class ResultBuilder<T> extends Builder {
            public ResultBuilder(NetParams<T> params, Class<T> tClass) {
                super(params);
                params.result(tClass);
            }

            public NetParams<T> build() {
                return params;
            }
        }
    }

    public static class Post {

        public static class ParamsBuilder extends TypeBuilder {

            public ParamsBuilder(NetParams params) {
                super(params);
            }

            public ParamsBuilder query(String key, Object value) {
                params.query(key, value);
                return this;
            }

            /**
             * body 参数，会以json形式提交
             *
             * @param key
             * @param value
             * @return
             */
            public ParamsBuilder jsonBody(String key, Object value) {
                params.jsonBody(key, value);
                return this;
            }

            public ParamsBuilder formBody(String key, Object value) {
                params.formBody(key, value);
                return this;
            }

            /**
             * 传入一个对象，以json形式提交
             *
             * @param value
             * @return
             */
            public ParamsBuilder jsonObject(Object value) {
                params.jsonObject(value);
                return this;
            }
        }

        public static class TypeBuilder extends Builder {

            public TypeBuilder(NetParams params) {
                super(params);
            }

            public <T> ResultBuilder<T> result(Class<T> tClass) {
                return new ResultBuilder<>(params, tClass);
            }
        }

        public static class ResultBuilder<T> extends Builder {
            public ResultBuilder(NetParams<T> params, Class<T> tClass) {
                super(params);
                params.result(tClass);
            }

            public NetParams<T> build() {
                return params;
            }
        }
    }

    private String baseUrl;
    private Map<String, Object> queryData = new HashMap<>();
    private Set<FormBody> formBodies = new HashSet<>();
    private Map<String, Object> postJsonBody = new HashMap<>();
    private Object postJsonObject;
    private String api;
    private Integer apiVersion = 1;
    private Class<T> resultType;
    private Method method = Method.GET;

    public String getApiUrl() {
        StringBuilder builder = new StringBuilder(getBaseUrl());
        if (apiVersion != null) {
            builder.append("/v")
                    .append(apiVersion);
        }
        return builder.toString();
    }

    public enum Method {
        GET, POST
    }

    protected NetParams method(Method method) {
        this.method = method;
        return this;
    }

    protected NetParams baseUrl(String baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }

    protected NetParams version(Integer version) {
        this.apiVersion = version;
        return this;
    }

    protected NetParams api(String api) {
        this.api = api;
        return this;
    }

    /**
     * 拼接在api之后的资源，类似月  xx/xxapi/value1/value2
     *
     * @param value
     * @return
     */
    protected NetParams apiRes(@NonNull Object value) {
        if (TextUtils.isEmpty(api)) {
            throw new IllegalStateException("api value must set first");
        }
        api = api + "/" + String.valueOf(value);
        return this;
    }

    /**
     * 参数，构建参数形式 post 的json格式数据，get时json格式或者是 ?A=a&B=b
     *
     * @param key
     * @param value
     * @return
     */
    protected NetParams query(String key, Object value) {
        queryData.put(key, value);
        return this;
    }

    protected NetParams jsonBody(String key, Object value) {
        postJsonBody.put(key, value);
        return this;
    }

    protected NetParams jsonObject(Object value) {
        postJsonObject = value;
        return this;
    }

    protected NetParams formBody(String key, Object value) {
        formBodies.add(new FormBody(key, value));
        return this;
    }

    protected NetParams<T> result(Class<T> tClass) {
        this.resultType = tClass;
        return this;
    }

    public String getBaseUrl() {
        if (!TextUtils.isEmpty(baseUrl)) {
            return baseUrl;
        }
        return NetEngine.getDefaultBaseUrl();
    }

    public Map<String, Object> getQueryData() {
        return queryData;
    }

    public Map<String, Object> getPostJsonBody() {
        return postJsonBody;
    }

    public Set<FormBody> getFormBodies() {
        return formBodies;
    }

    public String getApi() {
        return this.api;
    }

    public Class<T> getResultType() {
        return this.resultType;
    }

    public Method getMethod() {
        return method;
    }

    public Object getPostJsonObject() {
        return postJsonObject;
    }
}
