// Generated by delombok at Tue Nov 14 18:34:13 CST 2017
package net.engine;

import net.engine.request.NetRequest;
import net.engine.target.GetTarget;
import net.engine.target.PostTarget;
import net.engine.target.Target;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

/**
 * 网络请求
 */
public class NetEngine {
    // cpu 数量
    private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
    // 最大6个 最小3个
    private static final int CORE_POOL_SIZE = Math.max(3, Math.min(CPU_COUNT, 6));
    private static Config config;
    private final static Executor executor;

    static {
        executor = Executors.newFixedThreadPool(CORE_POOL_SIZE);
    }

    public static void init(Config config) {
        NetEngine.config = config;
    }

    /**
     * post 请求
     * <p>
     * 已失效，请使用 {@link #request(NetParams)}
     *
     * @return PostTarget
     */
    @Deprecated
    public static Target post() {
        return new PostTarget();
    }

    /**
     * get 请求
     * <p>
     * 已失效，请使用 {@link #request(NetParams)}
     *
     * @return GetTarget
     */
    @Deprecated
    public static Target get() {
        return new GetTarget();
    }

    /**
     * 根据给定的参数发起请求
     *
     * @param params
     * @param <T>
     * @return
     */
    public static <T> NetRequest<T> request(NetParams<T> params) {
        NetParams.Method method = params.getMethod();
        if (method == NetParams.Method.POST) {
            return new PostTarget().param(params);
        } else {
            return new GetTarget().param(params);
        }
    }

    public static JSONConvert getDefaultJsonConvert() {
        return NetEngine.config.getDefaultJsonConvert();
    }

    public static Executor getExecutor() {
        return executor;
    }

    public static RequestConvert getRequestConvert() {
        return NetEngine.config.getRequestConvert();
    }

    public static String getDefaultBaseUrl() {
        return NetEngine.config.getBaseApiUrl();
    }
}
